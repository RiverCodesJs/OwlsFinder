name: CI

on:
  push:
  pull_request:

jobs:
  lint-project:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run eslint
        run: npm run lint

  build-project:
    name: Build
    runs-on: ubuntu-latest
    needs: lint-project

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build
  
  test-vitest:
    name: Test
    runs-on: ubuntu-latest
    needs: build-project

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm run test

      - name: Sanitize branch name
        id: sanitize
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF//\//-}" >> $GITHUB_ENV

      - name: Print environment variables
        run: printenv
     
      - name: "Upload Coverage"
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ env.BRANCH_NAME }}
          path: coverage
      #TODO erease it
      - name: "Upload Coverage-develop"
        uses: actions/upload-artifact@v4
        with:
          name: coverage-develop
          path: coverage

  report-coverage:
    needs: test-vitest
    runs-on: ubuntu-latest
    
    steps:
      - name: Sanitize branch name
        id: sanitize
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF//\//-}" >> $GITHUB_ENV
      
      - name: Print environment variables
        run: printenv

      - name: "Download Coverage Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: coverage-${{ env.BRANCH_NAME }}
          path: coverage
      - uses: actions/download-artifact@v4
        with:
          name: coverage-develop
          path: coverage-develop

      - name: 'Report Coverage'
        if: always() 
        uses:  davelosert/vitest-coverage-report-action@v2
        with:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          json-summary-compare-path: coverage-develop/coverage-summary.json

  deploy-project:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test-vitest
    if: github.ref == 'refs/heads/production' 

    steps:
      - name: Deploy to Vercel
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
